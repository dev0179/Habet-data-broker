import eventlet

# Monkey patching for async support
eventlet.monkey_patch()

from flask import Flask, request, jsonify
from flask_socketio import SocketIO, emit
from flask_cors import CORS
import subprocess
import logging
import time
import threading
import serial
import math

# ======================== CONFIGURATION ========================
SERIAL_PORT = 'COM9'
SERIAL_BAUDRATE = 115200

ROTATOR_MODEL = '603'
ROTATOR_PORT = '/dev/ttyUSB0'

WEB_SOCKET_PORT = 5053

LAT_S = 42.02698670969771
LON_S = -93.6535530849385
ALT_S = 0.279  # in km

A = 6378.137
B = 6356.752
E2 = 1 - (B**2 / A**2)

# ======================== FLASK & SOCKETIO SETUP ========================
app = Flask(__name__)
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet")

logging.basicConfig(filename='rotator.log', level=logging.INFO, format='%(asctime)s - %(message)s')

latest_rotation = {"azimuth": 0, "elevation": 0}
latest_data = {}
data_lock = threading.Lock()

# ======================== UTILITY FUNCTIONS ========================
def execute_rotctl_command(command):
    try:
        result = subprocess.run(
            f"rotctl -m {ROTATOR_MODEL} -r {ROTATOR_PORT} {command}",
            shell=True, capture_output=True, text=True
        )
        return result.stdout.strip()
    except Exception as e:
        logging.error(f"rotctl command failed: {e}")
        return None

def update_rotator(azimuth, elevation):
    if azimuth is not None and elevation is not None:
        execute_rotctl_command(f'P {azimuth} {elevation}')
        logging.info(f"Rotator commanded to Az: {azimuth}, El: {elevation}")

def lla_to_ecef(lat, lon, alt):
    lat, lon = math.radians(lat), math.radians(lon)
    N = A / math.sqrt(1 - E2 * math.sin(lat)**2)
    X = (N + alt) * math.cos(lat) * math.cos(lon)
    Y = (N + alt) * math.cos(lat) * math.sin(lon)
    Z = ((B**2 / A**2) * N + alt) * math.sin(lat)
    return X, Y, Z

def ecef_to_enu(V, lat_s, lon_s):
    lat_s, lon_s = math.radians(lat_s), math.radians(lon_s)
    R = [
        [-math.sin(lon_s), math.cos(lon_s), 0],
        [-math.sin(lat_s) * math.cos(lon_s), -math.sin(lat_s) * math.sin(lon_s), math.cos(lat_s)],
        [math.cos(lat_s) * math.cos(lon_s), math.cos(lat_s) * math.sin(lon_s), math.sin(lat_s)]
    ]
    return [sum(R[i][j] * V[j] for j in range(3)) for i in range(3)]

def compute_az_el(lat_t, lon_t, alt_t):
    alt_t /= 1000
    Xs, Ys, Zs = lla_to_ecef(LAT_S, LON_S, ALT_S)
    Xt, Yt, Zt = lla_to_ecef(lat_t, lon_t, alt_t)
    V = [Xt - Xs, Yt - Ys, Zt - Zs]
    ENU = ecef_to_enu(V, LAT_S, LON_S)
    az = math.degrees(math.atan2(ENU[0], ENU[1]))
    if az < 0:
        az += 360
    el = math.degrees(math.atan2(ENU[2], math.sqrt(ENU[0]**2 + ENU[1]**2)))
    return az, el

# ======================== SERIAL READER ========================
def serial_reader():
    global latest_rotation
    try:
        ser = serial.Serial(SERIAL_PORT, SERIAL_BAUDRATE, timeout=1)
        logging.info(f"Connected to serial port {SERIAL_PORT}")
    except Exception as e:
        logging.error(f"Cannot open serial port {SERIAL_PORT}: {e}")
        return

    while True:
        try:
            line = ser.readline().decode('utf-8').strip()
            if line.startswith('$$HAR'):
                parts = line.split(',')
                if len(parts) >= 11:
                    with data_lock:
                        latest_data.update({
                            "time": parts[1],
                            "lat": parts[2],
                            "lon": parts[3],
                            "alt": parts[4],
                            "vx": parts[5],
                            "vy": parts[6],
                            "vz": parts[7],
                            "temperature": parts[8],
                            "pressure": parts[9],
                            "humidity": parts[10],
                            "other": parts[11] if len(parts) > 11 else None
                        })

                    try:
                        lat_t = float(parts[2])
                        lon_t = float(parts[3])
                        alt_t = float(parts[4])
                        az, el = compute_az_el(lat_t, lon_t, alt_t)
                        latest_rotation = {"azimuth": az, "elevation": el}
                        update_rotator(az, el)
                        socketio.emit('status_update', latest_rotation)
                    except ValueError:
                        logging.warning("Invalid telemetry data")
        except Exception as e:
            logging.error(f"Error reading serial: {e}")

        time.sleep(0.5)

# ======================== ROTATOR STATUS ========================
def rotator_status_thread():
    while True:
        try:
            status = execute_rotctl_command('p')
            if status:
                lines = status.splitlines()
                if len(lines) >= 2:
                    az = float(lines[0])
                    el = float(lines[1])
                    socketio.emit('status_update', {"azimuth": az, "elevation": el})
        except Exception as e:
            logging.error(f"Error retrieving rotator status: {e}")
        time.sleep(1)

# ======================== ROUTES ========================
@app.route('/rotate', methods=['POST'])
def rotate():
    """Manually update azimuth & elevation."""
    data = request.get_json()

    try:
        azimuth = float(data.get('azimuth', -1))
        elevation = float(data.get('elevation', -1))

        # Validate range (adjust if needed)
        if not (0 <= azimuth <= 360):
            return jsonify({"error": "Azimuth must be between 0 and 360"}), 400
        if not (0 <= elevation <= 90):
            return jsonify({"error": "Elevation must be between 0 and 90"}), 400

        # Run in background to avoid blocking request
        threading.Thread(target=update_rotator, args=(azimuth, elevation)).start()

        # Emit updated rotation to all connected clients
        socketio.emit('status_update', {"azimuth": azimuth, "elevation": elevation})

        return jsonify({"status": "command sent", "azimuth": azimuth, "elevation": elevation})

    except ValueError:
        return jsonify({"error": "Invalid input, azimuth and elevation must be numbers"}), 400

@socketio.on('connect')
def on_connect():
    emit('connection', {'status': 'connected'})

# ======================== MAIN ========================
if __name__ == '__main__':
    threading.Thread(target=serial_reader, daemon=True).start()
    socketio.start_background_task(rotator_status_thread)
    socketio.run(app, host='0.0.0.0', port=WEB_SOCKET_PORT)
